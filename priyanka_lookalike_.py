# -*- coding: utf-8 -*-
"""Priyanka_lookalike_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12kW4nIN7zI-UE4oByaIPkRME34OKacig
"""

# Import required libraries
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

"""load the data set"""

# Load the datasets
customers = pd.read_csv('/content/Customers.csv')
products= pd.read_csv('/content/Products.csv')
transactions = pd.read_csv('/content/Transactions.csv')

"""Data Preprocessing"""

# Merge datasets to create a comprehensive dataset
df = pd.merge(transactions, customers[['CustomerID', 'Region']], on='CustomerID', how='left')
df = pd.merge(df, products, on='ProductID', how='left')
print(df)

# Aggregate transaction features for each customer
customer_features = df.groupby('CustomerID').agg(
    total_spend=('TotalValue', 'sum'),
    avg_transaction_value=('TotalValue', 'mean'),
    transaction_count=('TransactionID', 'count'),
    product_diversity=('ProductID', 'nunique'),
    region=('Region', 'first')  # Include region as a categorical feature
).reset_index()
print(customer_features)

# One-hot encode categorical features
customer_features = pd.get_dummies(customer_features, columns=['region'])

#Feature Scaling
scaler = StandardScaler()
scaled_features = scaler.fit_transform(customer_features.drop(columns=['CustomerID']))

# Compute Cosine Similarity
similarity_matrix = cosine_similarity(scaled_features)

# Create a lookalike map for the first 20 customers
lookalike_map = {}
for i in range(20):  # For CustomerIDs C0001 - C0020
    customer_id = customer_features.iloc[i]['CustomerID']
    similarity_scores = list(enumerate(similarity_matrix[i]))
    # Sort by similarity score in descending order (excluding the customer itself)
    similar_customers = sorted(similarity_scores, key=lambda x: x[1], reverse=True)[1:4]
    # Get top 3 similar customers with their similarity scores
    lookalike_map[customer_id] = [(customer_features.iloc[j[0]]['CustomerID'], j[1]) for j in similar_customers]

# Convert the lookalike_map to a DataFrame
lookalike_data = []

# Populate the list with structured data
for customer_id, lookalikes in lookalike_map.items():
    for similar_customer, score in lookalikes:
        lookalike_data.append({
            'CustomerID': customer_id,
            'SimilarCustomerID': similar_customer,
            'SimilarityScore': score
        })

# Create a DataFrame from the structured data
lookalike_df = pd.DataFrame(lookalike_data)

# Save the DataFrame to a CSV file
lookalike_df.to_csv('Lookalike.csv', index=False)

# Print a success message
print("Lookalike.csv has been successfully saved!")
