# -*- coding: utf-8 -*-
"""Priyanka_Clustering .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/167-1Rh-vO431mcJxx9KDivc8lN9pdlAo
"""

# Import required libraries
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import davies_bouldin_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the datasets
customers = pd.read_csv('/content/Customers.csv')
transactions = pd.read_csv('/content/Transactions.csv')
products = pd.read_csv('/content/Products.csv')

# Data Preprocessing

# Merge the datasets on CustomerID
df = pd.merge(transactions, customers, on='CustomerID')

# Aggregate transaction data by CustomerID (e.g., total spend, frequency of transactions, recency)
customer_data = df.groupby('CustomerID').agg(
    total_spend=('Price', 'sum'),
    transaction_count=('TransactionID', 'count'),
    recency=('TransactionDate', lambda x: (pd.to_datetime('today') - pd.to_datetime(x.max())).days)
).reset_index()
print(customer_data.head())

# Merge with customer profile data (Region, SignupDate)
customer_data = pd.merge(customer_data, customers[['CustomerID', 'Region']], on='CustomerID')
print(customer_data)

# Feature Scaling
scaler = StandardScaler()
customer_data_scaled = scaler.fit_transform(customer_data[['total_spend', 'transaction_count', 'recency']])
print(customer_data_scaled)

# Choose the number of clusters (e.g., K=3)
kmeans = KMeans(n_clusters=3, random_state=42)
customer_data['Cluster'] = kmeans.fit_predict(customer_data_scaled)

# Calculate Davies-Bouldin Index (DB Index) for evaluation
db_index = davies_bouldin_score(customer_data_scaled, customer_data['Cluster'])
print(f'Davies-Bouldin Index: {db_index}')

# Visualization: PCA to reduce the dimensions to 2D for visualization
pca = PCA(n_components=2)
pca_components = pca.fit_transform(customer_data_scaled)
print(pca_components)

# Add PCA components to the dataframe
customer_data['PCA1'] = pca_components[:, 0]
customer_data['PCA2'] = pca_components[:, 1]
print(customer_data.head())

# Plotting the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', palette='Set2', data=customer_data, s=100)
plt.title('Customer Segmentation (K-Means Clustering)', fontsize=16)
plt.xlabel('PCA Component 1', fontsize=12)
plt.ylabel('PCA Component 2', fontsize=12)
plt.legend(title='Cluster')
plt.show()